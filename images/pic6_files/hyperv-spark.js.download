var remoteController = function () {

    var rdp;
    var initialized = false;
    var $vmWrapper;
    var currentMachine;
    var keyboard;
    var autologonInProgress = false;
    var connected = false;
    var shadowing = false;
    var shadowUserName = "";
    var bypassShadow = false;

    function canvasSupported() {
        var elem = document.createElement('canvas');
        return !!(elem.getContext && elem.getContext('2d'));
    }

    function webSocketsSupported() {
        return "WebSocket" in window;
    }

    function initialize() {
        if (initialized) {
            return;
        }       
        //$("body").focus(); //this fixes a focus issue caused when switching from an ActiveX controller. The outgoing AX controller holds focus, preventing the incoming page from properly establishing focus.
        if (!canvasSupported() || !webSocketsSupported()) {
            var message = "Sorry, you don't appear to be able to run the HTML5 remote controller in your browser.";
            if (navigator.appName === "Microsoft Internet Explorer" || !!navigator.userAgent.match(/Trident/)) {
                message += "\n\nIf you are running Internet Explorer 10 or later in compatibility mode, you'll need to disable compatibilty mode for this site. Many HTML5 components do not work while Internet Explorer is in compatibility mode.";
            } else {
                message += "Please try a different remote controller.";
            }
            alert(message);
            return;
        }
        initialized = true;
        $vmWrapper = $("#vmWrapper");
        $vmWrapper.html('<div id="sparkViewWrapper" style="text-align:left; position:relative; overflow:hidden;"><canvas id="remotectrl" style="width:800px; height:600px; outline: none; background-color:#000;"></canvas></div>');
        svGlobal.log = 0;
        keyboard = getKeyboardValue();

        $("#virtualKeyboard").virtualKeyboard({
            onKeyPress: function (key) {
                rdp.writeKeyCode(true, key);
                rdp.writeKeyCode(false, key);
            },
            onKeyDown: function (key) {
                rdp.writeKeyCode(true, key);
            },
            onKeyUp: function (key) {
                rdp.writeKeyCode(false, key);
            }
        });

        $("#showVirtualKeyboard").click(function () {
            $("#virtualKeyboard").virtualKeyboard("toggle");
        });
    }

    function getSize() {
        var $canvas = $("#vmWrapper canvas");
        return { width: $canvas.width(), height: $canvas.height() };
    }

    var postConnectionTimeout = null;
    var connectionAttempts = 0;

    function disconnect() {
        try {
            rdp.close();
            rdp = null;
            currentMachine = null;
            windows.clearTimeout(postConnectionTimeout);
        } catch (e) {
            //
        }
    }

    function getKeyboardValue() {
        //cultures names: http://www.csharp-examples.net/culture-names/
        //all keyboard layout values: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layouts
        switch (remoteController.language.toLowerCase()) {
            case "bg": //Bulgarian
                return 0x402;
            case "cs": //Czech
                return 0x405;
            case "da": //Danish
                return 0x406;
            case "de-de": //German
            case "de":
                return 1031;
            case "de-at": //German (Austrian)
                return 0xc07;
            case "de-ch": //German (Switzerland)
                return 2055;
            case "el":
            case "el-gr": //Greek
                return 0x408;
            case "us-EN": //English (US)
                return 1033;
            case "en-au": //English (Australia)
                return 0xc09;
            case "en-ca": //English (Canada)
                return 0x1009;
            case "en-gb": //English (United Kingdom)
                return 2057;
            case "en-ie": //English (Ireland)
                return 0x1809;
            case "en-nz": //English (New Zealand)
                return 0x1409;
            case "es":
            case "es-es": //Spanish (Spain)
                return 1034;
            case "es-mx": //Spanish (Mexico)
                return 2058;
            case "es-gt": //Spanish (Guatemala)
                return 4106;
            case "es-cr": //Spanish (Costa Rica)
                return 5130;
            case "es-pa": //Spanish (Panama)
                return 6154;
            case "es-do": //Spanish (Dominican Republic)
                return 7178;
            case "es-ve": //Spanish (Venezuela)
                return 8202;
            case "es-co": //Spanish (Colombia)
                return 9226;
            case "es-pe": //Spanish (Peru)
                return 10250;
            case "es-ar": //Spanish (Argentina)
                return 11274;
            case "es-ec": //Spanish (Ecuador)
                return 12298;
            case "es-cl": //Spanish (Chile)
                return 13322;
            case "es-ur": //Spanish (Uruguay)
                return 14346;
            case "es-py": //Spanish (Paraguay)
                return 15370;
            case "es-bo": //Spanish (Bolivia)
                return 16394;
            case "es-sv": //Spanish (El Salvador)
                return 17418;
            case "es-hn": //Spanish (Honduras)
                return 18442;
            case "es-ni": //Spanish (Nicaragua)
                return 19466;
            case "es-pr": //Spanish (Puerto Rico)
                return 20490;
            case "fi": //Finnish
            case "fi-fi":
                return 0x40b;
            case "fr": //French
            case "fr-fr":
                return 1036;
            case "fr-be": //French (Belgium)
                return 2060;
            case "fr-ca": //French (Canada)
                return 4105;
            case "fr-ch": //French (Switzerland)
                return 4108;
            case "hr": //Croatian
                return 0x41a;
            case "hu-hu": //Hungarian
            case "hu":
                return 0x40e;
            case "is-is": //Icelandic
            case "is":
                return 0x40f;
            case "it": //Italian
                return 1040;
            case "it-ch": //Italian (Swiss)
                return 0x810;
            case "ja": //Japanese
            case "ja-JP":
                return 3758162961;
            case "ko": //Korean
                return 3758162962;
            case "nl-be": //Dutch (Belgian)
                return 0x413;
            case "nl": //Dutch (Standard)
                return 0x407;
            case "nb-NO": //Norwegian (Bokmal)
            case "no":
                return 1044;
            case "nn-NO": //Norwegian (Nynorsk)
                return 2068;
            case "pl": //Polish
            case "pl-pl":
                return 0x415;
            case "pt": //Portuguese
            case "pt-pt":
                return 0x816;
            case "pt-br": //Portuguese(Brazilian)
                return 0x416;
            case "ro-ro": //Romanian
            case "ro":
                return 0x418;
            case "ru-RU": //Russian (Russia)
            case "ru":
                return 1049;
            case "sk": //Slovakian
            case "sk-sk":
                return 0x41b;
            case "sl": //Slovenian
            case "sl-si":
                return 0x424;
            case "sv-SE": //Swedish
            case "sv":
                return 1053;
            case "tr": //Turkish
            case "tr-tr":
                return 0x41f;
            default: //us-EN
                return 1033;
        }
    }

    var desiredMachine;
    var connectingMachine;

    //deprecated
    function connectSsh(machine) {
        $("#remotectrl").remove();
        $("#cursorID").remove();
        $('<canvas id="remotectrl" style="outline: none; background-color:#000;"></canvas><div id="cursorID" class="blinking-cursor" focus="false"></div>').appendTo($("#sparkViewWrapper"));
        var protocol = "wss://";
        var gateway = remoteController.rdpHtml5GatewayAddress;
        var sshAddress = machine.SshAddress;
        var port = machine.SshPort;
        var width = $vmWrapper.outerWidth();
        var height = $vmWrapper.outerHeight();
        var sshConnection = protocol + gateway + '/SSH?server=' + sshAddress + "&port=" + port + "&user=" + machine.Username.toLowerCase() + "&pwd=" + machine.Password + "&mapClipboard=off&fontSize=16";
        var ssh = new svGlobal.SSH(sshConnection, width, height);

        ssh.onclose = function () {
            ssh.hide();
            connected = false;
        };

        ssh.onerror = function (e) {
            console.log(e.name + ':' + e.message);
        };

        ssh.onsessionstart = function (sessionInfo) {
            connected = true;
            if (remoteController.onConnected) {
                remoteController.onConnected();
            }
        };

        ssh.onresolutionchange = function (w, h) {
            if (remoteController.onSizeChanged) {
                remoteController.onSizeChanged(w, h);
            }
        };

        ssh.addSurface(new svGlobal.LocalInterface());
        ssh.run();
    }

    function connect(machine) {
        if (machine === null) {
            return;
        }
        //console.log("Request for connection to " + machine.DisplayName + " Id = " + machine.Id);
        if (!machine.AllowDesktopConnections) {
            console.log("This machine does not allow desktop connections.");
            return;
        }

        try {
            if (desiredMachine !== machine) {
                connectionAttempts = 0;
            }
            desiredMachine = machine;
            window.clearTimeout(postConnectionTimeout);
            if (connectingMachine) {
                //console.log("There is already a connecting machine (" + connectingMachine.DisplayName + ") will connect " + desiredMachine.DisplayName + " when possible.");
                return;
            }
            if (rdp && rdp.running()) {
                //console.log("disconnecting from " + currentMachine.DisplayName);
                rdp.close();
                rdp = null;
            }
            connectingMachine = machine;
            var gateway = remoteController.rdpHtml5GatewayAddress;
            var session = null;
            if (shadowing && !bypassShadow) {
                if (!machine.RdpSessionId) {
                    //We are shadowing, but don't have a session to connect to. We will 1) try to get one, then either connect to what we find or create a new one
                    getFreshRdpSessionId(machine, null, 3000, 0, function (newRdpSessionId) {
                        if (labConsole.getSelectedMachine().ProfileId === machine.ProfileId && !connected) { //ensure the vm hasn't been changed.
                            if (newRdpSessionId) {
                                console.log("Found an RDP session to shadow.");
                            } else {
                                //still no session available
                                console.log("User session not available to shadow. Creating a new session.");
                                bypassShadow = true;
                            }
                            connect(machine);
                        }
                    });
                    currentMachine = null;
                    connectingMachine = null;
                    return;
                }
                gateway += "/JOIN";
                session = {
                    keyboard: keyboard,
                    gateway: gateway,
                    name: shadowUserName,
                    id: connectingMachine.RdpSessionId
                };
                if (connectingMachine.RdpGatewayAppId) {
                    session.appId = connectingMachine.RdpGatewayAppId;
                }
                console.log("Shadowing " + connectingMachine.DisplayName + ", RDP session ID = " + connectingMachine.RdpSessionId + ", gateway app ID = " + connectingMachine.RdpGatewayAppId);
            } else {
                session = {
                    keyboard: keyboard,
                    gateway: gateway,
                    server: remoteController.internalConsoleAddress,
                    port: remoteController.internalConsolePort,
                    width: connectingMachine.Width,
                    height: connectingMachine.Height,
                    vmid: connectingMachine.Id,
                    user: remoteController.serverAccountName,
                    pwd: remoteController.serverAccountPassword,
                    name: shadowUserName
                };

                if (model.recordRdpSession) {
                    session.sessionRecord = 1;
                    session.__record_name = model.orgId + "/" + model.labInstanceId + "/" + connectingMachine.ProfileId;
                }

                if (connectingMachine.UseEnhancedSessionMode) {
                    session.vmid += ";EnhancedMode=1";
                    session.mapClipboard = model.showPasteLinks && connectingMachine.RedirectClipboard;
                    session.playSound = connectingMachine.RedirectAudioOutput ? 0 : 2; //bring to local = 0
                    session.soundPref = 1; //1 = high quality, 0 = low quality
                    if (!shadowing) {
                        session.audioRecord = connectingMachine.CaptureAudioInput ? "on" : "off";
                        session.mapCamera = connectingMachine.RedirectDevices;
                        session.smartcard = connectingMachine.RedirectSmartCards ? "on" : "off";
                        //session.mapDisk = connectingMachine.RedirectDevices;
                    }
                    //session.server_bpp = connectingMachine.ColorDepth;
                    var size = labConsole.getVmWrapperSize();
                    session.width = size.width;
                    session.height = size.height;
                }
                console.log("Connecting to " + connectingMachine.DisplayName + " w=" + session.width + " h=" + session.height);
            }

            $("#remotectrl").remove();
            $('<canvas id="remotectrl" width="800" height="600" style="outline: none; background-color:#000;"></canvas>').appendTo($("#sparkViewWrapper"));
            var newRdp = new svGlobal.Rdp2(session);
            var localInterface = new svGlobal.LocalInterface();

            //Use the CTRL+ALT+BREAK key combo to escape focus from the vm
            var _keyHistory = [];
            localInterface.onscancode = function (down, scancode) {
                var len = _keyHistory.length;
                var isBreak = scancode === 197;
                var hit = false;

                //29 = ctrl, 56 = alt
                isBreak = (scancode !== 29 && scancode !== 56);
                if (isBreak) {
                    var preisCtrlAltDown = len > 1 &&
                        _keyHistory[len - 2].scancode === 29 && _keyHistory[len - 2].down &&
                        _keyHistory[len - 1].scancode === 56 && _keyHistory[len - 1].down;
                    var preisAltCtrlDown = len > 1 &&
                        _keyHistory[len - 2].scancode === 56 && _keyHistory[len - 2].down &&
                        _keyHistory[len - 1].scancode === 29 && _keyHistory[len - 1].down;
                    hit = preisCtrlAltDown || preisAltCtrlDown;
                }

                _keyHistory.push({ 'down': down, 'scancode': scancode });
                if (len > 20) {
                    _keyHistory.splice(0, 10);//remove the first 10
                }

                if (hit) {
                    //console.log('down:' + down + ' scancode:' + scancode);
                    localInterface.getInputElement().element.blur();
                    $('#machineCommands').focus();
                }
            };

            newRdp.addSurface(localInterface);
            newRdp.onerror = function (e) {
                //
            }
            newRdp.onclose = function () {

                if ((!shadowing || bypassShadow) && connectingMachine === machine && connected === false && connectionAttempts < 5 && labConsole.getSelectedMachine().ProfileId === machine.ProfileId) {
                    connectionAttempts += 1;
                    console.log("Connection failed... retrying attempt " + connectionAttempts);
                    connectingMachine = null;
                    connect(machine);
                    return;
                }

                connectionAttempts = 0;
                console.log("disconnected");
                
                if (newRdp === rdp) {
                    connected = false;
                }
                if (shadowing && !bypassShadow) {
                    //console.log("Shadow of session " + session.id + " ended");
                    //let's see if the current machine is still active in the client and a new session has started. This indicates the student has reconnected.
                    getFreshRdpSessionId(machine, session.id, 3000, 0, function (newSessionId) {
                        if (labConsole.getSelectedMachine().ProfileId === machine.ProfileId && !connected) { //ensure student hasn't switched machines
                            if (newSessionId !== session.id) { //we have a new session to connect to
                                console.log("A new RDP session exists to shadow.");
                                //console.log("Found session to shadow " + machine.RdpSessionId);
                            } else {
                                console.log("User session not available. Reconnecting to a fresh session.");
                                bypassShadow = true;
                            }
                            connect(machine);
                        }
                    });
                }
                bypassShadow = false;
                if (machine === currentMachine && !connected) {
                    currentMachine = null;
                }
                if (machine === connectingMachine) {
                    connectingMachine = null;
                }
            };
            newRdp.onsessionstart = function (sessionInfo) {
                bypassShadow = false;
                if (connectingMachine !== desiredMachine) {
                    //console.log("Connected to " + connectingMachine.DisplayName + ", but no longer desired machine. Now connecting to " + desiredMachine.DisplayName);
                    connectingMachine = null;
                    connect(desiredMachine);
                    return;
                }
                //console.log("connected to " + connectingMachine.DisplayName);
                currentMachine = connectingMachine;
                connectingMachine = null;
                currentMachine.lastAttemptedScreenWidth = null;
                currentMachine.lastAttemptedScreenHeight = null;
                rdp = newRdp;
                connected = true;
                postConnectionTimeout = window.setTimeout(function () {
                    if ((rdp === null || !rdp.running()) && connectionAttempts < 5) {
                        //console.log("Not running!");
                        connectionAttempts += 1;
                        connect(currentMachine);
                    } else {
                        connectionAttempts = 0;
                    }
                }, 1000);
                if (remoteController.onConnected) {                    
                    remoteController.onConnected({ rdpSessionId: sessionInfo.appInfo.session, rdpGatewayAppId: sessionInfo.appInfo.appId });
                    console.log("Connected to session: " + sessionInfo.appInfo.session + ", gateway app ID: " + sessionInfo.appInfo.appId);
                }
                if (!autologonInProgress && currentMachine.UseEnhancedSessionMode && currentMachine.AttemptAutoLogon) {
                    autologonInProgress = true;
                    window.setTimeout(function () {
                        if (!autologonInProgress) { return; }
                        newRdp.writeText(currentMachine.Password);
                        window.setTimeout(function () {
                            if (!autologonInProgress) { return; }
                            newRdp.writeKeyCode(true, 13);
                            newRdp.writeKeyCode(false, 13);
                            autologonInProgress = false;
                        }, 200);
                    }, 1500);
                }
            };
            newRdp.onresolutionchange = function (w, h) {
                //console.log("logged rez change: w:" + w + " h:" + h);
                if (currentMachine) {
                    currentMachine.Width = w;
                    currentMachine.Height = h;
                }
                if (remoteController.onSizeChanged) {
                    remoteController.onSizeChanged(w, h);
                }
            };
            newRdp.run();
        } catch (e) {
            console.error("Connection error: " + e);
            connectingMachine = null;
        }
    }

    function reconnect(machine) {
        //console.log("rdp is set = " + (rdp != null) + " rdp running: " + (rdp && rdp.running()) + " current machine: " + currentMachine.DisplayName);
        if (currentMachine) {
            currentMachine = null;
            connect(machine);
        } else {
            connect(machine);
        }
    }

    function getFreshRdpSessionId(machine, currentRdpSessionId, maxWaitTime, timeWaited, callback) {
        window.setTimeout(function () {
            timeWaited += 100;
            labConsole.getMachineRdpSessionId(machine.ProfileId, function (newSessionId) {
                if (newSessionId !== currentRdpSessionId) { //we have a new session to connect to
                    console.log('New session found after ' + timeWaited + "ms");
                    if (callback) callback(newSessionId);
                } else {
                    if (timeWaited < maxWaitTime) { //we'll wait for up to 3 seconds
                        getFreshRdpSessionId(machine, currentRdpSessionId, maxWaitTime, timeWaited, callback); //we haven't reached our timeout yet, try again
                    } else {
                        if (callback) callback(newSessionId); //end of the line
                    }
                }
            });
        }, 100);
    }

    function setViewOnly(v) {
        if (v) {
            $("#wsinput").hide();
        } else {
            $("#wsinput").show();
        }
    }

    function setSize(width, height) {
        if (currentMachine && currentMachine.UseEnhancedSessionMode) {
            var result = rdp.reconnect(width, height);
            if (result) {
                window.setTimeout(function () { labConsole.refreshVmWrapperLayout(); }, 2000);
            }
        }
    }

    function hide() {
        $("#sparkViewWrapper").hide();
        $("#virtualKeyboardWrapper").hide();
    }

    function hideIfCannotBeOverlaid() {

    }

    function show() {
        $("#sparkViewWrapper").show();
        $("#virtualKeyboardWrapper").show();
    }

    function sendCtrlAltDelete() {
        try {
            rdp.writeKeyComb("Ctrl+Alt+Del");
        } catch (e) {
            //
        }
    }

    function sendAltTab() {
        try {
            rdp.writeKeyComb("Alt+Tab");
        } catch (e) {
            //
        }
    }

    function getConnectionState() {
        return connected ? 1 : 0;
    }

    function getValidScreenSize(width, height) {
        return { width: width, height: height };
    }

    function canSendText() {
        return currentMachine.UseEnhancedSessionMode;
    }

    function sendText(text, canUseVmClipboard) {
        $("#wsinput").focus();
        if (canUseVmClipboard && model.showPasteLinks && currentMachine.RedirectClipboard) {
            rdp.writeClipboard(text);
            rdp.writeKeyComb("Ctrl+V", 100);
        } else {
            rdp.writeText(text, 100);
        }
    }

    function sendWindowsKey() {
        rdp.writeKeyComb("Windows");
        $("#wsinput").focus();
    }

    function sendKeyCombo(keys) {
        if (keys === null || keys.length === 0) return;

        if (keys[0] === 91) { //windows key (91) is ignored by RDP
            if (keys.length === 1) {
                rdp.writeKeyComb("Windows");
            } else {
                var winCombo = "Windows+";
                for (var i = 1, numKeys = keys.length; i < numKeys; i++) {
                    winCombo += "+" + String.fromCharCode(keys[i])
                }
                rdp.writeKeyComb(winCombo);
            }            
            $("#wsinput").focus();
            return;
        }

        for (var i = 0, numKeys = keys.length; i < numKeys; i++) {
            rdp.writeKeyCode(true, keys[i]);
        }
        for (var i = 0, numKeys = keys.length; i < numKeys; i++) {
            rdp.writeKeyCode(false, keys[i]);
        }
        $("#wsinput").focus();
    }

    return {
        setViewOnly: setViewOnly,
        resizeAfterConnectDelay: 100,
        initialize: initialize,
        connect: connect,
        connectSsh: connectSsh,
        disconnect: disconnect,
        reconnect: reconnect,
        getSize: getSize,
        setSize: setSize,
        hide: hide,
        hideIfCannotBeOverlaid: hideIfCannotBeOverlaid,
        show: show,
        canSendText: canSendText,
        sendText: sendText,
        sendCtrlAltDelete: sendCtrlAltDelete,
        sendAltTab: sendAltTab,
        getConnectionState: getConnectionState,
        getValidScreenSize: getValidScreenSize,
        requiresMachineIds: true,
        canSendWindowsKey: function () { return currentMachine.UseEnhancedSessionMode; },
        sendWindowsKey: sendWindowsKey,
        limitedScreenSizes: function () { return !currentMachine.UseEnhancedSessionMode; },
        supportsEnhancedSessionMode: true,
        supportsShadowing: true,        
        setShadowing: function (enabled, name) { shadowing = enabled; shadowUserName = name },
        focus: function () { $("#wsinput").focus(); },
        supportsAutoFocus: true,
        sendKeyCombo: sendKeyCombo,
        setAutoFocus: function (enabled) {
            hi5.appcfg.autoFocus = enabled;
        }
    };

}();
